{"version":3,"sources":["../../src/grades/grader.js"],"names":["templateNames","contentRegion","getWholeForumFunctions","cmid","getPostContextFunction","userid","Repository","getDiscussionByUserID","getContentForUserId","getContentForUserIdFunction","postContextFunction","then","context","discussions","length","builtdiscussions","map","discussion","discussionPostMapper","Templates","render","catch","Notification","exception","getUsers","getUsersForCmidFunction","CourseRepository","getUsersFromCourseModuleID","users","getGrades","getRubricForCmidFunction","Rubric","testTesting","findGradableNode","node","closest","Selectors","gradableItem","initialDiscussion","parentmap","posts","parentposts","post","id","newBuiltPosts","userposts","subject","readonly","parentid","key","index","parent","starter","name","registerLaunchListeners","document","addEventListener","e","target","matches","launch","rootNode","Error","gradableItems","wholeForum","wholeForumFunctions","dataset","Grader","groupid","initialUserId","initialuserid","preventDefault"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * This module will tie together all of the different calls the gradable module will make.\n *\n * @module     mod_forum/grades/grader\n * @package    mod_forum\n * @copyright  2019 Andrew Nicols <andrew@nicols.co.uk>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport * as Selectors from './grader/selectors';\nimport Repository from 'mod_forum/repository';\nimport Templates from 'core/templates';\nimport * as Grader from '../local/grades/grader';\nimport Notification from 'core/notification';\nimport CourseRepository from 'core_course/repository';\nimport * as Rubric from 'gradingform_rubric/repository';\n\nconst templateNames = {\n    contentRegion: 'mod_forum/grader/forum_grader_discussion_posts',\n};\n\nconst getWholeForumFunctions = (cmid) => {\n    const getPostContextFunction = () => {\n        return (userid) => {\n            return Repository.getDiscussionByUserID(userid, cmid);\n        };\n    };\n\n    const getContentForUserIdFunction = () => {\n        const postContextFunction = getPostContextFunction(cmid);\n        return (userid) => {\n            return postContextFunction(userid)\n                .then((context) => {\n                    if (context.discussions.length === 0) {\n                        return context;\n                    } else {\n                        context.builtdiscussions = context.discussions.map(discussion => {\n                            return discussionPostMapper(discussion);\n                        });\n                        return context;\n                    }\n                })\n                .then((context) => {\n                    return Templates.render(templateNames.contentRegion, context);\n                })\n                .catch(Notification.exception);\n        };\n    };\n\n    const getUsersForCmidFunction = () => {\n        return () => {\n            return CourseRepository.getUsersFromCourseModuleID(cmid)\n                .then((context) => {\n                    return context.users;\n                })\n                .catch(Notification.exception);\n        };\n    };\n\n    const getRubricForCmidFunction = () => {\n        return () => {\n            return Rubric.testTesting(cmid);\n        };\n    };\n\n    /**\n     * Make something for grade type template name\n     * const getRubricForCmidFunction = () => {};\n    */\n    return {\n        getContentForUserId: getContentForUserIdFunction(),\n        getUsers: getUsersForCmidFunction(),\n        getGrades: getRubricForCmidFunction()\n    };\n};\n\nconst findGradableNode = (node) => {\n    return node.closest(Selectors.gradableItem);\n};\n\nconst discussionPostMapper = (initialDiscussion) => {\n    // Lets build a mapping for Parent posts & Children.\n    const parentmap = initialDiscussion.posts.parentposts.map(post => {\n        return post.id;\n    });\n\n    const newBuiltPosts = initialDiscussion.posts.userposts.map(post => {\n        post.subject = null;\n        post.readonly = true;\n        if (post.parentid) {\n            parentmap.map((key, index) => {\n                if (post.parentid === key) {\n                    post.parent = initialDiscussion.posts.parentposts[index];\n                }\n            });\n        } else {\n            parentmap.map((key) => {\n                if (post.id === key) {\n                    post.starter = true;\n                }\n            });\n        }\n        return post;\n    });\n    return {\n        id: initialDiscussion.id,\n        name: initialDiscussion.name,\n        posts: {\n            userposts: newBuiltPosts\n        }\n    };\n};\n\nexport const registerLaunchListeners = () => {\n    document.addEventListener('click', (e) => {\n        if (e.target.matches(Selectors.launch)) {\n            const rootNode = findGradableNode(e.target);\n\n            if (!rootNode) {\n                throw Error('Unable to find a gradable item');\n            }\n\n            if (rootNode.matches(Selectors.gradableItems.wholeForum)) {\n                const wholeForumFunctions = getWholeForumFunctions(rootNode.dataset.cmid);\n\n                Grader.launch(wholeForumFunctions.getUsers, wholeForumFunctions.getContentForUserId, {\n                    groupid: rootNode.dataset.groupid,\n                    initialUserId: rootNode.dataset.initialuserid,\n                });\n\n                e.preventDefault();\n            } else {\n                throw Error('Unable to find a valid gradable item');\n            }\n        }\n    });\n};\n"],"file":"grader.min.js"}