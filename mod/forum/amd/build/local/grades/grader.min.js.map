{"version":3,"sources":["../../../src/local/grades/grader.js"],"names":["templateNames","grader","app","gradingPanel","error","displayUserPicker","root","html","pickerRegion","querySelector","Selectors","regions","Templates","replaceNodeContents","fetchContentFromRender","js","getUpdateUserContentFunction","getContentForUser","getGradeForUser","user","spinner","Promise","all","id","then","userGrade","moduleReplace","render","templatename","grade","gradingPanelHtml","gradingPanelJS","resolve","hasgrade","registerEventListeners","graderLayout","userPicker","saveGradeFunction","graderContainer","getContainer","addEventListener","e","target","closest","buttons","toggleFullscreen","stopImmediatePropagation","preventDefault","closeGrader","close","saveGrade","currentUser","getSaveUserGradeFunction","setGradeForUser","gradingPanelErrors","innerHTML","result","success","addToast","failed","displayGradingError","err","renderForPromise","message","errorString","launch","getListOfUsers","initialUserId","moduleName","fullscreen","showLoader","graderHTML","userList","updateUserContent","rootNode","view","userid","Modal","create","title","large","type","types","CANCEL","modal","getRoot","on","ModalEvents","hidden","destroy","show","output","document","createElement","renderGradeTemplate","gradeHTML","gradeJS","gradeReplace","setBody","outerHTML"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * This module will tie together all of the different calls the gradable module will make.\n *\n * @module     mod_forum/local/grades/grader\n * @package    mod_forum\n * @copyright  2019 Mathew May <mathew.solutions>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport Templates from 'core/templates';\nimport Selectors from './local/grader/selectors';\nimport getUserPicker from './local/grader/user_picker';\nimport {createLayout as createFullScreenWindow} from 'mod_forum/local/layout/fullscreen';\nimport getGradingPanelFunctions from './local/grader/gradingpanel';\nimport {add as addToast} from 'core/toast';\nimport {get_string as getString} from 'core/str';\nimport {failedUpdate} from 'core_grades/grades/grader/gradingpanel/normalise';\nimport {addIconToContainerWithPromise} from 'core/loadingicon';\nimport * as Modal from 'core/modal_factory';\nimport * as ModalEvents from 'core/modal_events';\n\nconst templateNames = {\n    grader: {\n        app: 'mod_forum/local/grades/grader',\n        gradingPanel: {\n            error: 'mod_forum/local/grades/local/grader/gradingpanel/error',\n        },\n    },\n};\n\n/**\n * Helper function that replaces the user picker placeholder with what we get back from the user picker class.\n *\n * @param {HTMLElement} root\n * @param {String} html\n */\nconst displayUserPicker = (root, html) => {\n    const pickerRegion = root.querySelector(Selectors.regions.pickerRegion);\n    Templates.replaceNodeContents(pickerRegion, html, '');\n};\n\n/**\n * To be removed, this is now done as a part of Templates.renderForPromise()\n *\n * @param {String} html\n * @param {String} js\n * @return {[*, *]}\n */\nconst fetchContentFromRender = (html, js) => {\n    return [html, js];\n};\n\n/**\n * Here we build the function that is passed to the user picker that'll handle updating the user content area\n * of the grading interface.\n *\n * @param {HTMLElement} root\n * @param {Function} getContentForUser\n * @param {Function} getGradeForUser\n * @return {Function}\n */\nconst getUpdateUserContentFunction = (root, getContentForUser, getGradeForUser) => {\n    return async(user) => {\n        const spinner = addIconToContainerWithPromise(root);\n        const [\n            [html, js],\n            userGrade,\n        ] = await Promise.all([\n            getContentForUser(user.id).then(fetchContentFromRender),\n            getGradeForUser(user.id),\n        ]);\n        Templates.replaceNodeContents(root.querySelector(Selectors.regions.moduleReplace), html, js);\n        const [\n            gradingPanelHtml,\n            gradingPanelJS\n        ] = await Templates.render(userGrade.templatename, userGrade.grade).then(fetchContentFromRender);\n        Templates.replaceNodeContents(root.querySelector(Selectors.regions.gradingPanel), gradingPanelHtml, gradingPanelJS);\n\n        spinner.resolve();\n\n        return userGrade.hasgrade;\n    };\n};\n\n/**\n * Add click handlers to the buttons in the header of the grading interface.\n *\n * @param {HTMLElement} graderLayout\n * @param {Object} userPicker\n * @param {Function} saveGradeFunction\n */\nconst registerEventListeners = (graderLayout, userPicker, saveGradeFunction) => {\n    const graderContainer = graderLayout.getContainer();\n    graderContainer.addEventListener('click', (e) => {\n        if (e.target.closest(Selectors.buttons.toggleFullscreen)) {\n            e.stopImmediatePropagation();\n            e.preventDefault();\n            graderLayout.toggleFullscreen();\n\n            return;\n        }\n\n        if (e.target.closest(Selectors.buttons.closeGrader)) {\n            e.stopImmediatePropagation();\n            e.preventDefault();\n\n            graderLayout.close();\n\n            return;\n        }\n\n        if (e.target.closest(Selectors.buttons.saveGrade)) {\n            saveGradeFunction(userPicker.currentUser);\n        }\n    });\n};\n\n/**\n * Get the function used to save a user grade.\n *\n * @param {HTMLElement} root The container for the grader\n * @param {Function} setGradeForUser The function that will be called.\n * @return {Function}\n */\nconst getSaveUserGradeFunction = (root, setGradeForUser) => {\n    return async(user) => {\n        try {\n            root.querySelector(Selectors.regions.gradingPanelErrors).innerHTML = '';\n            const result = await setGradeForUser(user.id, root.querySelector(Selectors.regions.gradingPanel));\n            if (result.success) {\n                addToast(await getString('grades:gradesavedfor', 'mod_forum', user));\n            }\n            if (result.failed) {\n                displayGradingError(root, user, result.error);\n            }\n\n            return result;\n        } catch (err) {\n            displayGradingError(root, user, err);\n\n            return failedUpdate(err);\n        }\n    };\n};\n\n/**\n * Display a grading error, typically from a failed save.\n *\n * @param {HTMLElement} root The container for the grader\n * @param {Object} user The user who was errored\n * @param {Object} err The details of the error\n */\nconst displayGradingError = async(root, user, err) => {\n    const [\n        {html, js},\n        errorString\n    ] = await Promise.all([\n        Templates.renderForPromise(templateNames.grader.gradingPanel.error, {error: err}),\n        await getString('grades:gradesavefailed', 'mod_forum', {error: err.message, ...user}),\n    ]);\n\n    Templates.replaceNodeContents(root.querySelector(Selectors.regions.gradingPanelErrors), html, js);\n    addToast(errorString);\n};\n\n/**\n * Launch the grader interface with the specified parameters.\n *\n * @param {Function} getListOfUsers A function to get the list of users\n * @param {Function} getContentForUser A function to get the content for a specific user\n * @param {Function} getGradeForUser A function get the grade details for a specific user\n * @param {Function} setGradeForUser A function to set the grade for a specific user\n */\nexport const launch = async(getListOfUsers, getContentForUser, getGradeForUser, setGradeForUser, {\n    initialUserId = null, moduleName\n} = {}) => {\n\n    // We need all of these functions to be executed in series, if one step runs before another the interface\n    // will not work.\n    const [\n        graderLayout,\n        graderHTML,\n        userList,\n    ] = await Promise.all([\n        createFullScreenWindow({fullscreen: false, showLoader: false}),\n        Templates.render(templateNames.grader.app, {moduleName: moduleName}),\n        getListOfUsers(),\n    ]);\n    const graderContainer = graderLayout.getContainer();\n\n    const saveGradeFunction = getSaveUserGradeFunction(graderContainer, setGradeForUser);\n\n    Templates.replaceNodeContents(graderContainer, graderHTML, '');\n    const updateUserContent = getUpdateUserContentFunction(graderContainer, getContentForUser, getGradeForUser);\n\n    // Fetch the userpicker for display.\n    const userPicker = await getUserPicker(\n        userList,\n        updateUserContent,\n        saveGradeFunction,\n        {\n            initialUserId,\n        },\n    );\n\n    // Register all event listeners.\n    registerEventListeners(graderLayout, userPicker, saveGradeFunction);\n\n    // Display the newly created user picker.\n    displayUserPicker(graderContainer, userPicker.rootNode);\n};\n\n/**\n * Show the grade for a specific user.\n *\n * @param {Function} getGradeForUser A function get the grade details for a specific user\n * @param {Number} userid The ID of a specific user\n */\nexport const view = async(getGradeForUser, userid, moduleName) => {\n\n    const [\n        userGrade,\n        modal,\n    ] = await Promise.all([\n        getGradeForUser(userid),\n        Modal.create({\n            title: moduleName,\n            large: true,\n            type: Modal.types.CANCEL\n        }),\n    ]);\n\n    const spinner = addIconToContainerWithPromise(modal.getRoot());\n\n    // Handle hidden event.\n    modal.getRoot().on(ModalEvents.hidden, function() {\n        // Destroy when hidden.\n        modal.destroy();\n    });\n\n    modal.show();\n    const output = document.createElement('div');\n    const {html, js} = await Templates.renderForPromise('mod_forum/local/grades/view_grade', userGrade);\n    Templates.replaceNodeContents(output, html, js);\n\n    // Note: We do not use await here because it messes with the Modal transitions.\n    const [gradeHTML, gradeJS] = await renderGradeTemplate(userGrade);\n    const gradeReplace = output.querySelector('[data-region=\"grade-template\"]');\n    Templates.replaceNodeContents(gradeReplace, gradeHTML, gradeJS);\n    modal.setBody(output.outerHTML);\n    spinner.resolve();\n};\n\nconst renderGradeTemplate = async(userGrade) => {\n    const {html, js} = await Templates.renderForPromise(userGrade.templatename, userGrade.grade);\n    return [html, js];\n};\nexport {getGradingPanelFunctions};\n"],"file":"grader.min.js"}